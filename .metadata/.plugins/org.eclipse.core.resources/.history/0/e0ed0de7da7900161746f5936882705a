package footbag;
import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryUtil.*;

public class HelloWorld {

	// The window handle
	private long window;
	private final int WIDTH = 1072;
	private final int HEIGHT = 720;
	private Map map;
	private Entity player;
	private DotUtil dotU;
	private int pixWide = 0;
	private int pixHigh = 0;
	private int pixWidth = 4;
	
	
	public void run() {
		System.out.println("Hello LWJGL " + Version.getVersion() + "!");

		try {
			init();
			loop();

			// Free the window callbacks and destroy the window
			glfwFreeCallbacks(window);
			glfwDestroyWindow(window);
			
		} finally {
			// Terminate GLFW and free the error callback
			glfwTerminate();
			glfwSetErrorCallback(null).free();
		}
	}

	private void init() {
		
		initGValues();
		
		// Setup an error callback. The default implementation
		// will print the error message in System.err.
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if ( !glfwInit() )
			throw new IllegalStateException("Unable to initialize GLFW");

		// Configure our window
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE); // the window will be resizable
		

//		int WIDTH = 1920;
//		int HEIGHT = 1080;

		// Create the window
		window = glfwCreateWindow(WIDTH, HEIGHT, "Hello World!", NULL, NULL);
		if ( window == NULL )
			throw new RuntimeException("Failed to create the GLFW window");
		
		// Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in our rendering loop
		});
		

		// Get the resolution of the primary monitor
		GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		// Center our window
		glfwSetWindowPos(
			window,
			(vidmode.width() - WIDTH) / 2,
			(vidmode.height() - HEIGHT) / 2
		);
		

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
		
		pixWide = WIDTH / pixWidth;
		pixHigh = HEIGHT / pixWidth;
	}

	private void loop() {
		// This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();

		
		
		
		// Set the clear color
		glClearColor(0.5f, 0.0f, 0.0f, 0.0f);
		
		
		
		
		
		// Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
			update();
			input();
			
			
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			glOrtho( 0, WIDTH, HEIGHT, 0, 1, -1);
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer
			
								
			glBegin(GL_TRIANGLES);
			for(int i = 0; i < pixWide; i++){
				for(int j = 0; j < pixHigh; j++){
//					float c = (float)(Math.random());
//					float[] col = {(float)(Math.random()),(float)(Math.random()),(float)(Math.random())};
					float[] col = dotU.getColor(map.getDot(i, j));
					
					drawSquare( i*pixWidth, j*pixWidth, pixWidth, pixWidth, col); 
				}
			}
			
			Map temp = player.getMap();
			for(int i = 0; i < temp.getWidth(); i++){
				for(int j = 0; j < temp.getHeight(); j++){
					float[] col = dotU.getColor(temp.getDot(i, j));
					if(!(temp.getDot(i, j).getType() == (byte)0))
					drawSquare( i*pixWidth+player.getX()*pixWidth, j*pixWidth+player.getY()*pixWidth, pixWidth, pixWidth, col);
				}
			}
			
			glEnd();
			
			
			
			glfwSwapBuffers(window); // swap the color buffers

			// Poll for window events. The key callback above will only be
			// invoked during this call.
			glfwPollEvents();
		}
	}
	
	private void render() {
		
	}
	
	private void input() {
		
		if(glfwGetKey(window, GLFW_KEY_RIGHT)==1){
			player.Move(1);
		}
		if(glfwGetKey(window, GLFW_KEY_LEFT)==1){
			player.Move(-1);
		}
		if(glfwGetKey(window, GLFW_KEY_UP)==1){
			player.Move(-3);
		}
		if(glfwGetKey(window, GLFW_KEY_SPACE)==1){
			map.putDot(player.getX()+player.getWidth(), player.getY()+player.getHeight(), new Dot((byte)1, (float)(Math.random()*0.1+0.9)));
		}
	}
	
	private void update() {
		map.update();
//		System.out.println(player.toString());
//		System.out.println(dotU.bToString(map.getDot(player.getX(),player.getY()).getType()));
		if( map.getDot(player.getX(),player.getY()+player.getHeight()).getType() == (byte)0){
			player.Move(3);
		}
	}
	
	private void initGValues(){
		System.out.println("initGValues");
		map = new Map(500,500);
		dotU = new DotUtil();
		System.out.println("Map: " + map.getWidth() + ", " + map.getHeight());
		for(int i = 0; i < map.getWidth(); i ++){
			for(int j = 0; j < map.getHeight(); j++){
				if( j > 100)
				map.putDot(i, j, new Dot(dotU.toByte("sand"), (float)(Math.random()*0.5 + 0.5) ) );
			}
		}
		
		player = new Entity (0, 0, 3, 5);
		
		
		
	}
	
	private void drawSquare(int x, int y, int w, int h, float [] color){
//		glBegin(GL_TRIANGLES);
			glColor3fv(color);
			glVertex2f(x,y);
			glVertex2f(x+w,y);
			glVertex2f(x,y+h);
			glVertex2f(x+w,y);
			glVertex2f(x,y+h);
			glVertex2f(x+w,y+h);
//		glEnd();
	}
	
	public static void main(String[] args) {
		new HelloWorld().run();
	}

}